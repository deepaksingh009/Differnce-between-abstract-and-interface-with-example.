 1. Multiple inheritance :
  
  Abstact class:-A class may inherit only one abstract class.
  
  Example :-
  
  public abstract class _abstact1
	{
		public void Method1()
		{
			Console.WriteLine("Method1");
		}
	}

	public abstract class _abstact2
	{
		public void Method1()
		{
			Console.WriteLine("Method1");
		}
	}

	public class Class1:_abstact1,_abstact2
	{

	}

Output:- Class 'Class1' cannot have multiple base classes: '_abstact1' and '_abstact2'.

Interface :-A class may inherit several interfaces.

Example:-
interface INterfacetutorial
	{
		void method1();
	}

	interface INInterface1
	{
		void method2();
	}

	public class _class:INterfacetutorial,INInterface1
	{
		public void method1()
		{
			Console.WriteLine("Method1");
		}
		public void method2()
		{
			Console.WriteLine("Method1");
		}

	}
	
output:- A class can inherit from multiple interface but we have to implement all the method of all inherit interface's.Without 
implementation it will show error. i.e,	'_class' does not implement interface member 'INterfacetutorial.method1()'.

Note:-we cannot create instance of both interface and abstract class.


2.Default implementation:-

Abstraction:-An abstract class can provide complete, default code and/or just the details that have to be overridden.

Interface:-An interface cannot provide any code, just the signature.

3.Access Modfiers:-

Abstraction:-An abstract class can contain access modifiers for the subs, functions, properties.

interface:-An interface cannot have access modifiers for the subs, functions, properties etc everything is assumed as public.

4.When to use interface and abstration:-

Abstraction :-If various implementations are of the same kind and use common behaviour or status then abstract class is better to use.

Interface :-If various implementations only share method signatures then it is better to use Interfaces.






